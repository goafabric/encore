version: "3.7"

services:
  application:
    container_name: ${_Values_root_name}-application
    image:  ${_Values_image_repository}${_Values_image_native}:${_Values_image_tag}
    restart: 'no'
    ports:
      - "${_Values_service_port}:${_Values_service_port}"
    entrypoint: ${_Values_resources_entrypoint}

    healthcheck:
      test: "curl -f http://localhost:${_Values_service_port}/actuator/health || exit 1"
      disable: ${_Values_health_check_disabled} #disabled for native images because of no curl
      interval: 10s
      timeout: 10s
      retries: 5
      
    volumes:
      - tmp:/tmp
      - applogs:/usr/share/logs
    networks:
      - ${_Values_root_name}-net
    environment:
      #application
      TZ: Europe/Berlin
      server.port: "${_Values_service_port}"
      server.tomcat.threads.max: "20"
      server.forward-headers-strategy: FRAMEWORK

      #security
      security.authentication.enabled: "false"

      #monitoring
      management.endpoint.health.show-details: always
      management.endpoints.web.exposure.include: "health,heapdump,circuitbreakers,prometheus"

      #zipkin/jaeger
      spring.application.name: "encore"
      management.zipkin.tracing.endpoint: "http://host.docker.internal:9411/api/v2/spans"
      management.tracing.sampling.probability: "1.0"
      management.tracing.enabled: "true"
      logging.level.zipkin2.reporter: "ERROR"

      #s3
      spring.cloud.aws.s3.endpoint: "http://s3minio:9000"
      spring.cloud.aws.s3.enabled: "true"

      #mongo
      spring.data.mongodb.host: "mongodb"

      #log levels
      logging.level.root: "WARN"
      logging.level.org.goafabric: "INFO"
      logging.level.org.springframework: "INFO"

  mongodb:
    image: mongo:6.0.4
    container_name: ${_Values_root_name}-mongodb
    restart: 'no'
    ports:
      - 27017:27017
    volumes:
      - mongoconfig:/data/configdb
      - mongodata:/data/db
    networks:
      - ${_Values_root_name}-net
    environment:
      TZ: "Europe/Berlin"
      MONGO_INITDB_ROOT_USERNAME: "mongodb"
      MONGO_INITDB_ROOT_PASSWORD: "mongodb"

  s3minio:
    container_name: s3minio
    command: server /data --console-address ':9001'
    image: quay.io/minio/minio:RELEASE.2023-01-25T00-19-54Z
    restart: 'no'
    ports:
      - 9100:9000
      - 9101:9001
    volumes:
      - miniodata:/data
    networks:
      - ${_Values_root_name}-net
    environment:
      TZ: "Europe/Berlin"

  auth-server:
    container_name: auth-server
    image: goafabric/spring-auth-server-native${_Values_server_arch}:1.0.2
    restart: 'no'
    ports:
      - "30200:30200"
    command: [ "-Xmx32M" ]
    environment:
      #application
      server.forward-headers-strategy: FRAMEWORK

      #auth
      spring.security.authorization.base-uri: "/oidc"
      spring.security.authorization.clients: "oauth2-proxy:none"
      spring.security.authorization.users: "user1:user1,user2:user2,user3:user3,user4:user4"
    networks:
      - ${_Values_root_name}-net

  oauth2-proxy:
    container_name: oauthproxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.4.0
    command:
      - --email-domain=*
    restart: 'no'
    ports:
      - "4180:4180"
    environment:
      #application
      TZ: Europe/Berlin

      # oauth2proxy generic config
      OAUTH2_PROXY_UPSTREAM: "file:///dev/null"
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"

      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"

      # oauth2proxy provider config
      OAUTH2_PROXY_PROVIDER: "oidc"
      OAUTH2_PROXY_CLIENT_ID: "oauth2-proxy"
      OAUTH2_PROXY_SKIP_OIDC_DISCOVERY: "true"

      # urls
      OAUTH2_PROXY_REDIRECT_URL: "http://localhost:8080/oauth2/callback"
      OAUTH2_PROXY_LOGIN_URL: "http://localhost:30200/oidc/auth"

      OAUTH2_PROXY_OIDC_ISSUER_URL: "http://auth-server:30200"
      OAUTH2_PROXY_OIDC_JWKS_URL: "http://auth-server:30200/oidc/certs"
      OAUTH2_PROXY_REDEEM_URL: "http://auth-server:30200/oidc/token"

      # secrets
      OAUTH2_PROXY_CLIENT_SECRET: none
      OAUTH2_PROXY_COOKIE_SECRET: SvJIUgqBKxOYSxJwFREiOg==

    networks:
      - ${_Values_root_name}-net
    depends_on:
      - application

  nginx:
    container_name: ${_Values_root_name}-nginx
    image: nginx:1.22.1
    restart: 'no'
    ports:
      - 8080:80
    networks:
      - ${_Values_root_name}-net
    volumes:
      - ./nginx/nginx${_Values_nginx_oidc}.conf:/etc/nginx/nginx.conf
    depends_on:
      application:
        condition: service_started

volumes:
    tmp:
    applogs:
    miniodata:
    mongoconfig:
    mongodata:

networks:
  encore-net:
    driver: bridge